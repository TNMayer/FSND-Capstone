{
	"info": {
		"_postman_id": "5f6d6e64-0b5e-449b-8df7-b01af4ccc857",
		"name": "FSND_CAPSTONE",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "actors",
			"item": [
				{
					"name": "get:actors_assistant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No Authorization header, status 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8080/actors",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "get:actors_director",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.actors[0].name).to.be.an('string')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_director}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8080/actors",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "get:actors_producer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.actors[0].name).to.be.an('string')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_producer}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8080/actors",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete:actors_producer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_producer}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8080/actors/1000",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"actors",
								"1000"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete:actors_assistant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since user is not authorized for action\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_assistant}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8080/actors/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"actors",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete:actors_director",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_director}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8080/actors/5",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"actors",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "post:actors_producer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response contains expected name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.actor.name).to.eql('Morgan Freeman');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_producer}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Morgan Freeman\",\r\n    \"age\": 84,\r\n    \"gender\": \"male\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8080/actors",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "post:actors_assistant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since user is not authorized for action\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_assistant}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Morgan Freeman\",\r\n    \"age\": 84,\r\n    \"gender\": \"male\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8080/actors",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "post:actors_director",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response contains expected name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.actor.name).to.eql('Marco Sciaini');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_director}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Marco Sciaini\",\r\n    \"age\": 31,\r\n    \"gender\": \"male\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8080/actors",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch:actors_producer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response contains expected name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.actors.name).to.eql('Morgan Freeman');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_producer}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Morgan Freeman\",\r\n    \"age\": 84,\r\n    \"gender\": \"male\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8080/actors/3",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"actors",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch:actors_director",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response contains expected name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.actors.name).to.eql('Stefan Reifenberg');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_director}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Stefan Reifenberg\",\r\n    \"age\": 35,\r\n    \"gender\": \"male\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8080/actors/3",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"actors",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch:actors_assistant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since user is not authorized for action\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_assistant}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Morgan Freeman\",\r\n    \"age\": 84,\r\n    \"gender\": \"male\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8080/actors/3",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"actors",
								"3"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "movies",
			"item": [
				{
					"name": "get:movies_assistant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No Authorization header, status 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8080/movies",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "get:movies_director",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.movies[0].title).to.be.an('string')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_director}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8080/movies",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "get:movies_producer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.movies[0].title).to.be.an('string')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_producer}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8080/movies",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete:movies_assistant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since user is not authorized for action\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_assistant}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8080/movies/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"movies",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete:movies_director",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403: unauthorized\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_director}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8080/movies/4",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"movies",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete:movies_producer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_producer}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8080/movies/4",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"movies",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "post:movies_assistant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since user is not authorized for action\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_assistant}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Karottenpommes am Abend\",\r\n    \"release_date\": \"2021-07-30\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8080/movies",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "post:movies_director",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since user is not authorized for action\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_director}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Karottenpommes am Abend\",\r\n    \"release_date\": \"2021-07-30\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8080/movies",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "post:movies_producer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response contains expected name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.movie.title).to.eql('Karottenpommes am Abend');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_producer}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Karottenpommes am Abend\",\r\n    \"release_date\": \"2021-07-30\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8080/movies",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch:movies_assistant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since user is not authorized for action\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_assistant}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Die Pommesbude\",\r\n    \"release_date\": \"2024-01-05\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8080/movies/3",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"movies",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch:movies_director",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response contains expected name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.movies.title).to.eql('Die Pommesbude');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_director}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Die Pommesbude\",\r\n    \"release_date\": \"2024-01-05\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8080/movies/3",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"movies",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch:movies_producer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response contains expected name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.movies.title).to.eql(\"Die Rasselbande aus Riedlingen\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_producer}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Die Rasselbande aus Riedlingen\",\r\n    \"release_date\": \"2026-01-05\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8080/movies/4",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"movies",
								"4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "castings",
			"item": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://127.0.0.1:8080"
		},
		{
			"key": "token_assistant",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IkxXTDRxQ3hFbEVOcFFja2l2MmFQTCJ9.eyJpc3MiOiJodHRwczovL3RubWF5ZXIuZXUuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDYxMDZmMTYwMDI2MGI4MDA2OGIzYjhlNCIsImF1ZCI6ImZzbmRfY2Fwc3RvbmUiLCJpYXQiOjE2MjgwODM3MzAsImV4cCI6MTYyODE3MDEzMCwiYXpwIjoiZkM4cFlTOUxsbklRd1l3T0tkbGlUQjBPZnlVdjQzbG4iLCJzY29wZSI6IiIsInBlcm1pc3Npb25zIjpbImdldDphY3RvcnMiLCJnZXQ6Y2FzdGluZ3MiLCJnZXQ6bW92aWVzIl19.oKAHWa23DUxPdUMLKDmhB8mffjzzNGfLIyzuUuYuEj9KKBCsOJaXL8nJ2_WdA3qCQXDKnokum07YjfbpxUb6BEMtfM4-jsdnS9CWz5PZ4OMS-ChRAxb-u_C8gaExmk_4GcPAK9MigfokGfeTGN4lCEMiiyAdv8DX1KkkxEzCxdBhih4YcJgFb2PY1Gq4wJE6id76OHYC74KuVpq2WqcjWVqTt8zOIbp3K85ImaM1CQGsydzTNCbNEfnCoC5uGDkdJR1GUIpVxmCl5sIBwjeTCl5YN2lZnAK3MZUe3969HYIxHrSnQo3-vkJEaZTG2F1okcthvKpWSFWIGimC2HFgTA"
		},
		{
			"key": "token_director",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IkxXTDRxQ3hFbEVOcFFja2l2MmFQTCJ9.eyJpc3MiOiJodHRwczovL3RubWF5ZXIuZXUuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDYxMDZmMTk1ZmE0NWMwMDA2OTIwMmNiMSIsImF1ZCI6ImZzbmRfY2Fwc3RvbmUiLCJpYXQiOjE2MjgwODM5NzcsImV4cCI6MTYyODE3MDM3NywiYXpwIjoiZkM4cFlTOUxsbklRd1l3T0tkbGlUQjBPZnlVdjQzbG4iLCJzY29wZSI6IiIsInBlcm1pc3Npb25zIjpbImRlbGV0ZTphY3RvcnMiLCJnZXQ6YWN0b3JzIiwiZ2V0OmNhc3RpbmdzIiwiZ2V0Om1vdmllcyIsInBhdGNoOmFjdG9ycyIsInBhdGNoOmNhc3RpbmdzIiwicGF0Y2g6bW92aWVzIiwicG9zdDphY3RvcnMiXX0.Jpck601wvf-lS9XmEkl0HLIimeBCAmxncDw7K6vulIySLiBLuNMhiYqk47mfn7q8tfdlhTwzf-NzuZnxZjvLCgn_3TGtaUmeg3OdQcDd3GixOawPPfI0qKsebEjvCeh6_1rSs_cU_zUgp6cRAHALRDSRk3xRfeEFIqA3gDL_zgRDIa6suW5KeJpUZloQIMKPvsqumZUTyb0urx-_GYUrupEMryfVzmgNJAx6U2Z6K01jBfD21qNwu7WEmIkwlafREnroCy5rEnVn92xDkHWCxWSqaMfF0MftemenOHT-RJoO4gX22Cbnw8aCWZdEbIUwnHXn6tz-X8pzOuIgQV8hCA"
		},
		{
			"key": "token_producer",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IkxXTDRxQ3hFbEVOcFFja2l2MmFQTCJ9.eyJpc3MiOiJodHRwczovL3RubWF5ZXIuZXUuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDYxMDZmMWYxNTMzMGI1MDA2YTg2NGM4MiIsImF1ZCI6ImZzbmRfY2Fwc3RvbmUiLCJpYXQiOjE2MjgwODQwNTQsImV4cCI6MTYyODE3MDQ1NCwiYXpwIjoiZkM4cFlTOUxsbklRd1l3T0tkbGlUQjBPZnlVdjQzbG4iLCJzY29wZSI6IiIsInBlcm1pc3Npb25zIjpbImRlbGV0ZTphY3RvcnMiLCJkZWxldGU6Y2FzdGluZ3MiLCJkZWxldGU6bW92aWVzIiwiZ2V0OmFjdG9ycyIsImdldDpjYXN0aW5ncyIsImdldDptb3ZpZXMiLCJwYXRjaDphY3RvcnMiLCJwYXRjaDpjYXN0aW5ncyIsInBhdGNoOm1vdmllcyIsInBvc3Q6YWN0b3JzIiwicG9zdDpjYXN0aW5ncyIsInBvc3Q6bW92aWVzIl19.QJQssGffKsUgDaT6HOnxxrcPyl9X2cH2TnvNQvAValT1C6858rNvtys0Ble7_1J32OAO6VDlpYOnTjKQiNGjr-BJMOwN9m2dwrhx5g_rC0lU4eKpQf61FWuIHRPZ0M3D7jFefWle93AIJIz4Fjsqpr9LYo-_jzsIAsaKKp05a8xiZvTEFKIms7ztwMgzQ29mHVtYyS6rjbF2bbmBw0RHkUgWpDukP6rdCBb95GINbTSW76YL8GdeuLgi3aWjsAdrB0PYKv9ayyCmF1daWCmDszqJPDOo7LeZhRdYd6Gm95AzNV9I7LatE0KglzdK99jBRIbbIIxG9I6VknqXLLnMJQ"
		}
	]
}